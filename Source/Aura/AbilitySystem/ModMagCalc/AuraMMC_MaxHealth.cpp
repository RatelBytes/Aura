// Copyright Ratelbytes

#include "AbilitySystem/ModMagCalc/AuraMMC_MaxHealth.h"

#include "AuraTypes.h"
#include "AbilitySystem/AuraAttributeSet.h"
#include "Interaction/AuraCombatInterface.h"

UAuraMMC_MaxHealth::UAuraMMC_MaxHealth()
{
	// Here we define, what attribute should be captured, and in our case we use GetVigorAttribute function (generated by macro for us)
	VigorDef.AttributeToCapture = UAuraAttributeSet::GetVigorAttribute();

	// We capture Vigor from the Target (in our case Aura Character)
	VigorDef.AttributeSource = EGameplayEffectAttributeCaptureSource::Target;

	/** Snapshotting means getting the value at the time of creation of GE, and NOT-Snapshotting means getting the value at the time of application of GE.
	 * For example, fireball. We create fireball and shoot it at the enemy.
	 * If bSnapshot is True, then the value is captured and stored inside GE at the time of creation of Fireball.
	 * If bSnapshot is False, then the value is captured and stored in GE at the time of Fireball hitting enemy and GE being applied to Enemy. */ 
	VigorDef.bSnapshot = false;

	// This will ensure that we will have access to Vigor for calculations
	RelevantAttributesToCapture.Add(VigorDef);
}

float UAuraMMC_MaxHealth::CalculateBaseMagnitude_Implementation(const FGameplayEffectSpec& Spec) const
{
	// Gather tags from source and target

	const FGameplayTagContainer* SourceTags = Spec.CapturedSourceTags.GetAggregatedTags();
	const FGameplayTagContainer* TargetTags = Spec.CapturedTargetTags.GetAggregatedTags();

	FAggregatorEvaluateParameters EvaluationParameters;
	EvaluationParameters.SourceTags = SourceTags;
	EvaluationParameters.TargetTags = TargetTags;

	// This will be set to actual value of Vigor at runtime when function is called.
	float Vigor = 0.f;
	GetCapturedAttributeMagnitude(VigorDef, Spec, EvaluationParameters, Vigor);

	Vigor = FMath::Max<float>(Vigor, 0.f);

	IAuraCombatInterface* CombatInterface = Cast<IAuraCombatInterface>(Spec.GetContext().GetSourceObject());
	const int32 PlayerLevel = CombatInterface->GetPlayerLevel();

	// Formula to calculate MaxHealth. 80 is base value for MaxHealth, then for every point in Vigor, we add 2.5 to MaxHealth, then for each PlayerLevel we add another 10 to MaxHealth; 
	return BaseAttributesValues::BaseMaxHealth + 2.5f * Vigor + 10.f * PlayerLevel;
}
